One difference between the two libraries is in the way the threads are joined back to the main thread. With pthreads we have to explicitly call the pthread_join method, otherwise the program will hang. With JThreads this is not necessary and the main thread will finish when all the other threads have finished. JThreads are easier to think about, especially if you are familiar with OOP. It's easier to think about threads as different classes and while it requires more boilerplate code, it makes more intuitive sense and it's easier to program. 

Another big difference is how the memory is shared. Pthreads threads usually work by accessing global variables while jthreads work by passing reference to the class that extends the runnable interface and calling different methods on that class. It seems that the way JThreads share memory is much more flexible and powerful because it's not limited to only global variables but also other functions and anything that can go inside java classes. It's possible to do the same with pthreads but it requires a lot more code. 

In retrospect, I think JThreads are easier to work with because Java is an abstraction over C and I don't have to deal with the low level maintenance stuff. Furthermore, the java garbage collector makes it easer to not worry about leaking memory and focus on the logic. 