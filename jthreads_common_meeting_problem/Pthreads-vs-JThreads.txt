One big difference between the two libraries is the way we create threads. With Pthreads we pass a reference to the
method that we want to be executed by the threads. In Jthreads we first have to implement the runnable interface and then pass it to a Thread constructor and finally call start() on the Thread class. This does require more boilerplate code but I believe that JThreads are easier to think about, especially if you are familiar with OOP. It's easier to think about threads as different classes and while it requires extra code, it makes more intuitive sense and it's easier to program. 

Another big difference is how memory is shared. Pthreads threads usually work by accessing global variables while jthreads work by passing reference to the class that extends the runnable interface and calling different methods on that class. It seems that the way JThreads share memory is much more flexible and powerful because it's not limited to only global variables but also other functions and anything that can go inside java classes. It's possible to do the same with pthreads but it requires a lot more code. 

Finally, in Pthreads we have to call pthread_join to join the threads back to the main thread while this is not necessary for Jthreads. If we don't call pthread_join in C the main function will hang, while in Java it will just wait for all threads to finish and then the main method will exit.